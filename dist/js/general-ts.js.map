{
  "version": 3,
  "sources": [
    "core.ts",
    "settings.ts"
  ],
  "names": [
    "LolitaFramework",
    "Block",
    "blockSelector",
    "this",
    "block",
    "jQuery",
    "length",
    "console",
    "warn",
    "MediaBreakpoints",
    "_super",
    "call",
    "__extends",
    "prototype",
    "init",
    "_this",
    "window",
    "on",
    "onResize",
    "mediaBreakpoints",
    "sort",
    "a",
    "b",
    "upValue",
    "currentDeviceType",
    "currentWidth",
    "document",
    "width",
    "_i",
    "_a",
    "breakpoint",
    "undefined",
    "onBreakpointChange",
    "addMediaBreakpoint",
    "name",
    "RangeError",
    "push"
  ],
  "mappings": "yMAEUA,iBAAV,SAAUA,GAaN,GAAAC,GAAA,WAgBI,QAAAA,GAAYC,GACRC,KAAKD,cAAgBA,EACrBC,KAAKC,MAAQC,OAAOH,GAEfC,KAAKC,MAAME,QACZC,QAAQC,KAAK,yCAA2CL,KAAKD,eAGzE,MAAAD,KAxBsBD,GAAAC,MAAKA,CA6B3B,IAAAQ,GAAA,SAAAC,GAiBI,QAAAD,GAAYP,GACRQ,EAAAC,KAAAR,KAAMD,GAmEd,MArF+CU,WAAAH,EAAAC,GAwBjCD,EAAAI,UAAAC,KAAV,WAAA,GAAAC,GAAAZ,IACIE,QAAOW,QAAQC,GAAG,SACd,WACIF,EAAKG,aAGbf,KAAKe,YAWCT,EAAAI,UAAAK,SAAV,WACIT,EAAiBU,iBAAmBV,EAAiBU,iBAAiBC,KAAK,SAACC,EAAGC,GAC3E,MAAIA,GAAEC,QAAUF,EAAEE,QACP,EACAD,EAAEC,QAAUF,EAAEE,SACd,EAEA,GAOf,KAAuB,GAFnBC,GADAC,EAA+BpB,OAAOqB,UAAUC,QAG7BC,EAAA,EAAAC,EAAApB,EAAiBU,iBAAjBS,EAAAC,EAAAvB,OAAAsB,IAAkC,CAApD,GAAIE,GAAUD,EAAAD,EACXH,IAAgBK,EAAWP,UAC3BC,EAAoBM,GAMxBN,GAAqBrB,KAAKqB,oBAC1BrB,KAAKqB,kBAAoBA,EACAO,QAArBP,GACAjB,QAAQC,KAAK,oCAEjBL,KAAK6B,mBAAmBR,KAQlBf,EAAAwB,mBAAd,SAAiCH,GAC7B,IAAKA,EAAWI,KACZ,KAAM,IAAIC,YAAW,uCAEzB,IAAIL,EAAWP,QAAU,EACrB,KAAM,IAAIY,YAAW,wCAEzB1B,GAAiBU,iBAAiBiB,KAAKN,IA7E1BrB,EAAAU,oBA+ErBV,GArF+CR,EAAzBD,GAAAS,iBAAgBA,GA1ChCT,kBAAAA;ACCV,GAAUA,kBAAV,SAAUA,GAENA,EAAAS,iBAAiBwB,oBAAoBC,KAAM,KAAMX,QAAS,OAC1DvB,EAAAS,iBAAiBwB,oBAAoBC,KAAM,KAAMX,QAAS,OAC1DvB,EAAAS,iBAAiBwB,oBAAoBC,KAAM,KAAMX,QAAS,MAC1DvB,EAAAS,iBAAiBwB,oBAAoBC,KAAM,KAAMX,QAAS,OALpDvB,kBAAAA",
  "file": "general-ts.js",
  "sourcesContent": [
    "/// <reference path='../def/jquery.d.ts' />\n\nnamespace LolitaFramework {\n\n    /**\n     * Breakpoint interface\n     */\n    export interface Breakpoint {\n        name: string,\n        upValue: number\n    }\n\n    /**\n     * Block generic Class\n     */\n    export abstract class Block {\n        /**\n         * Block object\n         * @type {JQuery}\n         */\n        protected block: JQuery;\n\n        /**\n         * Block selector\n         * @type {string}\n         */\n        protected blockSelector: string;\n\n        /**\n         * Constructor\n         */\n        constructor(blockSelector: string) {\n            this.blockSelector = blockSelector;\n            this.block = jQuery(blockSelector);\n\n            if (!this.block.length) {\n                console.warn('There is no any blocks with selector: ' + this.blockSelector);\n            }\n        }\n    }\n\n    /**\n     * MediaBreakpoints supporting\n     */\n    export abstract class MediaBreakpoints extends Block {\n\n        /**\n         * Array of device types\n         * @type {Array}\n         */\n        protected static mediaBreakpoints: Array<Breakpoint> = [];\n\n        /**\n         * Current device type\n         * @type {Breakpoint}\n         */\n        protected currentDeviceType: Breakpoint;\n\n        /**\n         * Constructor\n         */\n        constructor(blockSelector: string) {\n            super(blockSelector);\n        }\n\n        /**\n         * Init Mediabreakpoints\n         */\n        protected init() {\n            jQuery(window).on('resize',\n                () => {\n                    this.onResize();\n                }\n            );\n            this.onResize();\n        }\n\n        /**\n         * On breakpoint changed\n         */\n        protected abstract onBreakpointChange(breakpoint: Breakpoint): void;\n\n        /**\n         * On screen resize\n         */\n        protected onResize() {\n            MediaBreakpoints.mediaBreakpoints = MediaBreakpoints.mediaBreakpoints.sort((a, b): number => {\n                if (b.upValue > a.upValue) {\n                    return 1;\n                } else if (b.upValue < a.upValue) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            });\n\n            let currentWidth: number = <number>jQuery(document).width();\n            let currentDeviceType: Breakpoint;\n\n            for (let breakpoint of MediaBreakpoints.mediaBreakpoints) {\n                if (currentWidth <= breakpoint.upValue) {\n                    currentDeviceType = breakpoint;\n                } else {\n                    // break;\n                }\n            }\n\n            if (currentDeviceType != this.currentDeviceType) {\n                this.currentDeviceType = currentDeviceType;\n                if (currentDeviceType == undefined) {\n                    console.warn('Current device type is undefined');\n                }\n                this.onBreakpointChange(currentDeviceType);\n            }\n        }\n\n        /**\n         * Added breakpoint to mediaBreakpoints value\n         * @param {Breakpoint} breakpoint description\n         */\n        public static addMediaBreakpoint(breakpoint: Breakpoint): void {\n            if (!breakpoint.name) {\n                throw new RangeError('Breakpoint label should be not empty');\n            }\n            if (breakpoint.upValue < 1) {\n                throw new RangeError('Breakpoint upValue should be positive');\n            }\n            MediaBreakpoints.mediaBreakpoints.push(breakpoint);\n        }\n    }\n}\n",
    "/// <reference path=\"./core.ts\" />\n// Options\n\nnamespace LolitaFramework {\n    // media breakpoints\n    MediaBreakpoints.addMediaBreakpoint({name: 'xl', upValue: 9999});\n    MediaBreakpoints.addMediaBreakpoint({name: 'lg', upValue: 1400});\n    MediaBreakpoints.addMediaBreakpoint({name: 'md', upValue: 1000});\n    MediaBreakpoints.addMediaBreakpoint({name: 'sm', upValue: 768});\n}\n"
  ],
  "sourceRoot": "/source/"
}